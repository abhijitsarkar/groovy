/*
 * Copyright (c) 2014, the original author or authors.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * A copy of the GNU General Public License accompanies this software,
 * and is also available at http://www.gnu.org/licenses.
 */

configurations {
    provided
    weld {
        extendsFrom(testRuntime)
    }
    all*.exclude group: 'org.jboss.spec.javax.annotation'
    all*.exclude group: 'org.jboss.spec.javax.interceptor'
}

dependencies {
    compile project(':movie-manager-domain')
    compile(
            [group: 'org.apache.lucene', name: 'lucene-core', version: luceneVersion],
            [group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: luceneVersion],
            [group: 'org.apache.lucene', name: 'lucene-queryparser', version: luceneVersion],
            [group: 'javax.inject', name: 'javax.inject', version: injectApiVersion],
            [group: 'javax.validation', name: 'validation-api', version: beanValidationApiVersion],
            [group: 'javax.annotation', name: 'javax.annotation-api', version: annotationApiVersion],
            [group: 'javax.interceptor', name: 'javax.interceptor-api', version: interceptorApiVersion]
    )
    compile(
            [group: 'javax.enterprise', name: 'cdi-api', version: cdiApiVersion]
    ) {
        // We're using the javax.el-api
        exclude group: 'javax.el', module: 'el-api'
        // We're using newer versions
        exclude group: 'javax.annotation', module: 'jsr250-api'
    }
    provided(
            [group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion],
            [group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4jVersion]
    )
    testCompile project(path: ':movie-manager-domain', configuration: 'test')
    testCompile(
            [group: 'org.apache.lucene', name: 'lucene-test-framework', version: luceneVersion],
            [group: 'org.apache.deltaspike.modules', name: 'deltaspike-test-control-module-impl', version: deltaspikeVersion]
    )
    weld(
            [group: 'org.apache.deltaspike.cdictrl', name: 'deltaspike-cdictrl-weld', version: deltaspikeVersion],
            [group: 'org.jboss.weld.se', name: 'weld-se', version: weldSEVersion]
    )
}

sourceSets {
    [main, test].each {
        it.compileClasspath += configurations.provided
        it.runtimeClasspath += configurations.provided

        it.output.resourcesDir = project.file("$buildDir/classes/${it.name}")
    }
    test.runtimeClasspath += configurations.weld
}

test {
    // Exclude individual CDI test classes, they'll be ran as CDI suite
    excludes = ['**/MovieRipServiceTest.class', '**/MovieFacadeTest.class'] as Set
}