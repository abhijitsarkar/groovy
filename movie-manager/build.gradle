/*
 * Copyright (c) 2014, the original author or authors.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * A copy of the GNU General Public License accompanies this software,
 * and is also available at http://www.gnu.org/licenses.
 */

buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath(
                // https://github.com/stevesaliman/gradle-cobertura-plugin
                [group: 'net.saliman', name: 'gradle-cobertura-plugin', version: coberturaPluginVersion]
        )
    }
}

allprojects {
    group = projectGroup
    version = projectVersion

    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'codenarc'
    apply plugin: 'cobertura'

    configurations {
        // Old Jetty dependencies brought in by Cobertura
        all*.exclude group: 'org.mortbay.jetty'
    }

    codenarc {
        configFile = file("${rootProject.projectDir}/src/main/config/codenarc/codenarc.groovy")
        toolVersion = codenarcToolVersion
        ignoreFailures = true
    }

    [codenarcMain, codenarcTest, instrument, copyCoberturaDatafile, generateCoberturaReport,
            performCoverageCheck].each {
        it.onlyIf { !project.hasProperty('skipCoverage') }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile(
                [group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion],
        )
        runtime(
                [group: 'org.gmetrics', name: 'GMetrics', version: gmetricsVersion]
        )
        testCompile(
                [group: 'org.gmock', name: 'gmock', version: gmockVersion],
                [group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion],
                [group: 'junit', name: 'junit', version: junitVersion]
        )
    }

    jar { manifest.attributes provider: 'Abhijit Sarkar' }

    build.dependsOn tasks.cobertura
}

test {
    // Makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true

    dependsOn subprojects.test
}

cobertura {
    coberturaVersion = project.coberturaVersion

    coverageSourceDirs = project.allprojects.sourceSets.collect {
        // srcDirs is a Set<File>
        it.main.groovy.srcDirs + it.main.java.srcDirs
    }.flatten { it }

    coverageDirs = project.allprojects.sourceSets.main.output.classesDir

    coverageMergeDatafiles = project.subprojects.buildDir.collect { file("${it}/cobertura/cobertura.ser") }
}
